
TimersAndInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005d8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000066c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e16  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038f  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048c  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072e  00000000  00000000  00002ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
  8a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <gpioPortDirection+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <gpioPortDirection+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <gpioPortDirection+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
  a4:	6a bb       	out	0x1a, r22	; 26
	break;
  a6:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
  a8:	67 bb       	out	0x17, r22	; 23
	break;
  aa:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
  ac:	64 bb       	out	0x14, r22	; 20
	break;
  ae:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <gpioPortWrite+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPortWrite+0x12>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f0       	breq	.+14     	; 0xce <gpioPortWrite+0x1a>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f4       	brne	.+16     	; 0xd4 <gpioPortWrite+0x20>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
  c6:	6b bb       	out	0x1b, r22	; 27
	break;
  c8:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
  ca:	68 bb       	out	0x18, r22	; 24
	break;
  cc:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
  ce:	65 bb       	out	0x15, r22	; 21
	break;
  d0:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	08 95       	ret

000000d6 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <gpioPortToggle+0x1a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <gpioPortToggle+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	59 f0       	breq	.+22     	; 0xf8 <gpioPortToggle+0x22>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	81 f4       	brne	.+32     	; 0x106 <gpioPortToggle+0x30>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	80 95       	com	r24
  ec:	8b bb       	out	0x1b, r24	; 27
	break;
  ee:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	80 95       	com	r24
  f4:	88 bb       	out	0x18, r24	; 24
	break;
  f6:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	85 bb       	out	0x15, r24	; 21
	break;
  fe:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 95       	com	r24
 104:	82 bb       	out	0x12, r24	; 18
 106:	08 95       	ret

00000108 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	49 f0       	breq	.+18     	; 0x11e <gpioPortRead+0x16>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <gpioPortRead+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	39 f0       	breq	.+14     	; 0x122 <gpioPortRead+0x1a>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	49 f4       	brne	.+18     	; 0x12a <gpioPortRead+0x22>
 118:	06 c0       	rjmp	.+12     	; 0x126 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 11a:	8b b3       	in	r24, 0x1b	; 27
	break;
 11c:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 11e:	88 b3       	in	r24, 0x18	; 24
	break;
 120:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 122:	85 b3       	in	r24, 0x15	; 21
	break;
 124:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 126:	82 b3       	in	r24, 0x12	; 18
	break;
 128:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
 12a:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
 12c:	08 95       	ret

0000012e <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 12e:	44 23       	and	r20, r20
 130:	19 f0       	breq	.+6      	; 0x138 <gpioPinDirection+0xa>
 132:	4f 3f       	cpi	r20, 0xFF	; 255
 134:	d1 f5       	brne	.+116    	; 0x1aa <gpioPinDirection+0x7c>
 136:	21 c0       	rjmp	.+66     	; 0x17a <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	69 f0       	breq	.+26     	; 0x156 <gpioPinDirection+0x28>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	28 f0       	brcs	.+10     	; 0x14a <gpioPinDirection+0x1c>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	79 f0       	breq	.+30     	; 0x162 <gpioPinDirection+0x34>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	c9 f4       	brne	.+50     	; 0x17a <gpioPinDirection+0x4c>
 148:	12 c0       	rjmp	.+36     	; 0x16e <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 14a:	8a b3       	in	r24, 0x1a	; 26
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	89 23       	and	r24, r25
 152:	8a bb       	out	0x1a, r24	; 26
 154:	1b c0       	rjmp	.+54     	; 0x18c <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 156:	87 b3       	in	r24, 0x17	; 23
 158:	96 2f       	mov	r25, r22
 15a:	90 95       	com	r25
 15c:	89 23       	and	r24, r25
 15e:	87 bb       	out	0x17, r24	; 23
 160:	19 c0       	rjmp	.+50     	; 0x194 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 162:	84 b3       	in	r24, 0x14	; 20
 164:	96 2f       	mov	r25, r22
 166:	90 95       	com	r25
 168:	89 23       	and	r24, r25
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	17 c0       	rjmp	.+46     	; 0x19c <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 16e:	81 b3       	in	r24, 0x11	; 17
 170:	96 2f       	mov	r25, r22
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	81 bb       	out	0x11, r24	; 17
 178:	15 c0       	rjmp	.+42     	; 0x1a4 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	59 f0       	breq	.+22     	; 0x194 <gpioPinDirection+0x66>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	28 f0       	brcs	.+10     	; 0x18c <gpioPinDirection+0x5e>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	59 f0       	breq	.+22     	; 0x19c <gpioPinDirection+0x6e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	81 f4       	brne	.+32     	; 0x1aa <gpioPinDirection+0x7c>
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 18c:	8a b3       	in	r24, 0x1a	; 26
 18e:	68 2b       	or	r22, r24
 190:	6a bb       	out	0x1a, r22	; 26
	break;
 192:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 194:	87 b3       	in	r24, 0x17	; 23
 196:	68 2b       	or	r22, r24
 198:	67 bb       	out	0x17, r22	; 23
	break;
 19a:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 19c:	84 b3       	in	r24, 0x14	; 20
 19e:	68 2b       	or	r22, r24
 1a0:	64 bb       	out	0x14, r22	; 20
	break;
 1a2:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 1a4:	81 b3       	in	r24, 0x11	; 17
 1a6:	68 2b       	or	r22, r24
 1a8:	61 bb       	out	0x11, r22	; 17
 1aa:	08 95       	ret

000001ac <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 1ac:	44 23       	and	r20, r20
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <gpioPinWrite+0xa>
 1b0:	4f 3f       	cpi	r20, 0xFF	; 255
 1b2:	b1 f5       	brne	.+108    	; 0x220 <gpioPinWrite+0x74>
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	61 f0       	breq	.+24     	; 0x1d2 <gpioPinWrite+0x26>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <gpioPinWrite+0x1c>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	69 f0       	breq	.+26     	; 0x1dc <gpioPinWrite+0x30>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	69 f5       	brne	.+90     	; 0x220 <gpioPinWrite+0x74>
 1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	60 95       	com	r22
 1cc:	68 23       	and	r22, r24
 1ce:	6b bb       	out	0x1b, r22	; 27
	break;
 1d0:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	60 95       	com	r22
 1d6:	68 23       	and	r22, r24
 1d8:	68 bb       	out	0x18, r22	; 24
	break;
 1da:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	60 95       	com	r22
 1e0:	68 23       	and	r22, r24
 1e2:	65 bb       	out	0x15, r22	; 21
	break;
 1e4:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 1e6:	82 b3       	in	r24, 0x12	; 18
 1e8:	60 95       	com	r22
 1ea:	68 23       	and	r22, r24
 1ec:	62 bb       	out	0x12, r22	; 18
	break;
 1ee:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinWrite+0x5e>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	28 f0       	brcs	.+10     	; 0x202 <gpioPinWrite+0x56>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	59 f0       	breq	.+22     	; 0x212 <gpioPinWrite+0x66>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	81 f4       	brne	.+32     	; 0x220 <gpioPinWrite+0x74>
 200:	0c c0       	rjmp	.+24     	; 0x21a <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	68 2b       	or	r22, r24
 206:	6b bb       	out	0x1b, r22	; 27
	break;
 208:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	68 2b       	or	r22, r24
 20e:	68 bb       	out	0x18, r22	; 24
	break;
 210:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 212:	85 b3       	in	r24, 0x15	; 21
 214:	68 2b       	or	r22, r24
 216:	65 bb       	out	0x15, r22	; 21
	break;
 218:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 21a:	82 b3       	in	r24, 0x12	; 18
 21c:	68 2b       	or	r22, r24
 21e:	62 bb       	out	0x12, r22	; 18
 220:	08 95       	ret

00000222 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	59 f0       	breq	.+22     	; 0x23c <gpioPinToggle+0x1a>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	28 f0       	brcs	.+10     	; 0x234 <gpioPinToggle+0x12>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	59 f0       	breq	.+22     	; 0x244 <gpioPinToggle+0x22>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	81 f4       	brne	.+32     	; 0x252 <gpioPinToggle+0x30>
 232:	0c c0       	rjmp	.+24     	; 0x24c <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 234:	8b b3       	in	r24, 0x1b	; 27
 236:	68 27       	eor	r22, r24
 238:	6b bb       	out	0x1b, r22	; 27
	break;
 23a:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	68 27       	eor	r22, r24
 240:	68 bb       	out	0x18, r22	; 24
	break;
 242:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 244:	85 b3       	in	r24, 0x15	; 21
 246:	68 27       	eor	r22, r24
 248:	65 bb       	out	0x15, r22	; 21
	break;
 24a:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	68 27       	eor	r22, r24
 250:	62 bb       	out	0x12, r22	; 18
 252:	08 95       	ret

00000254 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	51 f0       	breq	.+20     	; 0x26c <gpioPinRead+0x18>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinRead+0x12>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	49 f0       	breq	.+18     	; 0x272 <gpioPinRead+0x1e>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	69 f4       	brne	.+26     	; 0x27e <gpioPinRead+0x2a>
 264:	09 c0       	rjmp	.+18     	; 0x278 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 266:	89 b3       	in	r24, 0x19	; 25
 268:	68 23       	and	r22, r24
	break;
 26a:	0a c0       	rjmp	.+20     	; 0x280 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 26c:	86 b3       	in	r24, 0x16	; 22
 26e:	68 23       	and	r22, r24
	break;
 270:	07 c0       	rjmp	.+14     	; 0x280 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 272:	83 b3       	in	r24, 0x13	; 19
 274:	68 23       	and	r22, r24
	break;
 276:	04 c0       	rjmp	.+8      	; 0x280 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 278:	80 b3       	in	r24, 0x10	; 16
 27a:	68 23       	and	r22, r24
	break;
 27c:	01 c0       	rjmp	.+2      	; 0x280 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 27e:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	66 23       	and	r22, r22
 284:	09 f4       	brne	.+2      	; 0x288 <gpioPinRead+0x34>
 286:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 288:	08 95       	ret

0000028a <G_interrupt_Enable>:
#include "Interrupts.h"

void G_interrupt_Enable(void)
{
//SET_BIT(SREG,7);	
SREG |=(1<<7);
 28a:	8f b7       	in	r24, 0x3f	; 63
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	8f bf       	out	0x3f, r24	; 63
}
 290:	08 95       	ret

00000292 <G_interrupt_Disable>:

void G_interrupt_Disable(void)
{

SREG &=(~(SREG,7));
 292:	8f b7       	in	r24, 0x3f	; 63
 294:	8f b7       	in	r24, 0x3f	; 63
 296:	88 7f       	andi	r24, 0xF8	; 248
 298:	8f bf       	out	0x3f, r24	; 63
}
 29a:	08 95       	ret

0000029c <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	69 f0       	breq	.+26     	; 0x2ba <Led_Init+0x1e>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <Led_Init+0x12>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	79 f0       	breq	.+30     	; 0x2c6 <Led_Init+0x2a>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	c1 f4       	brne	.+48     	; 0x2dc <Led_Init+0x40>
 2ac:	12 c0       	rjmp	.+36     	; 0x2d2 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
 2b4:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2b8:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	60 e2       	ldi	r22, 0x20	; 32
 2be:	4f ef       	ldi	r20, 0xFF	; 255
 2c0:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2c4:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	60 e4       	ldi	r22, 0x40	; 64
 2ca:	4f ef       	ldi	r20, 0xFF	; 255
 2cc:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2d0:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	60 e8       	ldi	r22, 0x80	; 128
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
 2dc:	08 95       	ret

000002de <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	69 f0       	breq	.+26     	; 0x2fc <Led_On+0x1e>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <Led_On+0x12>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	79 f0       	breq	.+30     	; 0x308 <Led_On+0x2a>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	c1 f4       	brne	.+48     	; 0x31e <Led_On+0x40>
 2ee:	12 c0       	rjmp	.+36     	; 0x314 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	60 e1       	ldi	r22, 0x10	; 16
 2f4:	4f ef       	ldi	r20, 0xFF	; 255
 2f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 2fa:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	60 e2       	ldi	r22, 0x20	; 32
 300:	4f ef       	ldi	r20, 0xFF	; 255
 302:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 306:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	60 e4       	ldi	r22, 0x40	; 64
 30c:	4f ef       	ldi	r20, 0xFF	; 255
 30e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 312:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	60 e8       	ldi	r22, 0x80	; 128
 318:	4f ef       	ldi	r20, 0xFF	; 255
 31a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
 31e:	08 95       	ret

00000320 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	69 f0       	breq	.+26     	; 0x33e <Led_Off+0x1e>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	28 f0       	brcs	.+10     	; 0x332 <Led_Off+0x12>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	79 f0       	breq	.+30     	; 0x34a <Led_Off+0x2a>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	c1 f4       	brne	.+48     	; 0x360 <Led_Off+0x40>
 330:	12 c0       	rjmp	.+36     	; 0x356 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	60 e1       	ldi	r22, 0x10	; 16
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 33c:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	60 e2       	ldi	r22, 0x20	; 32
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 348:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	60 e4       	ldi	r22, 0x40	; 64
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 354:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	60 e8       	ldi	r22, 0x80	; 128
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
 360:	08 95       	ret

00000362 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	61 f0       	breq	.+24     	; 0x37e <Led_Toggle+0x1c>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	28 f0       	brcs	.+10     	; 0x374 <Led_Toggle+0x12>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	69 f0       	breq	.+26     	; 0x388 <Led_Toggle+0x26>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	a1 f4       	brne	.+40     	; 0x39a <Led_Toggle+0x38>
 372:	0f c0       	rjmp	.+30     	; 0x392 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	60 e1       	ldi	r22, 0x10	; 16
 378:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 37c:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	60 e2       	ldi	r22, 0x20	; 32
 382:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 386:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	60 e4       	ldi	r22, 0x40	; 64
 38c:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 390:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	60 e8       	ldi	r22, 0x80	; 128
 396:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
 39a:	08 95       	ret

0000039c <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;	 
 39c:	82 bf       	out	0x32, r24	; 50
}
 39e:	08 95       	ret

000003a0 <timer0Read>:
 
uint8_t timer0Read(void)
{
	 return TCNT0;	 
 3a0:	82 b7       	in	r24, 0x32	; 50
}
 3a2:	08 95       	ret

000003a4 <timer0Start>:
						
*/
void timer0Start(void)
{

	 TCCR0 &= (0xF8);		 
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	88 7f       	andi	r24, 0xF8	; 248
 3a8:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
 3aa:	93 b7       	in	r25, 0x33	; 51
 3ac:	80 91 64 00 	lds	r24, 0x0064
 3b0:	89 2b       	or	r24, r25
 3b2:	83 bf       	out	0x33, r24	; 51
}
 3b4:	08 95       	ret

000003b6 <timer0Stop>:
						      0     0    0
*/ 
void timer0Stop(void)
 {
	 
TCCR0 &= (0xF8);		 
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	88 7f       	andi	r24, 0xF8	; 248
 3ba:	83 bf       	out	0x33, r24	; 51
	 
 }
 3bc:	08 95       	ret

000003be <timer0Init>:
#include "ledConfig.h"
#include "timers.h"
#include "registers.h"
#include "Interrupts.h"
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
 3be:	ef 92       	push	r14
 3c0:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
 3c2:	44 23       	and	r20, r20
 3c4:	19 f4       	brne	.+6      	; 0x3cc <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
 3c6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <timer0Stop>
 3ca:	20 c0       	rjmp	.+64     	; 0x40c <timer0Init+0x4e>
}
else
{
TCCR0 |= en_mode | en_OC0|en_prescal ;
 3cc:	93 b7       	in	r25, 0x33	; 51
 3ce:	89 2b       	or	r24, r25
 3d0:	68 2b       	or	r22, r24
 3d2:	64 2b       	or	r22, r20
 3d4:	63 bf       	out	0x33, r22	; 51
Prescaler_Value=en_prescal;
 3d6:	40 93 64 00 	sts	0x0064, r20
TCNT0 = u8_initialValue;
 3da:	22 bf       	out	0x32, r18	; 50
OCR0  =u8_outputCompare;
 3dc:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	e8 16       	cp	r14, r24
 3e2:	49 f0       	breq	.+18     	; 0x3f6 <timer0Init+0x38>
 3e4:	e8 16       	cp	r14, r24
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <timer0Init+0x32>
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	e8 16       	cp	r14, r24
 3ec:	79 f4       	brne	.+30     	; 0x40c <timer0Init+0x4e>
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <timer0Init+0x44>
case  T0_POLLING:
TIMSK &= T0_POLLING;
 3f0:	89 b7       	in	r24, 0x39	; 57
 3f2:	19 be       	out	0x39, r1	; 57
break;
 3f4:	0b c0       	rjmp	.+22     	; 0x40c <timer0Init+0x4e>
case T0_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
 3f6:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
 3fa:	89 b7       	in	r24, 0x39	; 57
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	89 bf       	out	0x39, r24	; 57
break;
 400:	05 c0       	rjmp	.+10     	; 0x40c <timer0Init+0x4e>
}
case T0_INTERRUPT_CMP:
{
G_interrupt_Enable();
 402:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |=T0_INTERRUPT_CMP;
 406:	89 b7       	in	r24, 0x39	; 57
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	89 bf       	out	0x39, r24	; 57
}
}
	 
}

}
 40c:	0f 91       	pop	r16
 40e:	ef 90       	pop	r14
 410:	08 95       	ret

00000412 <timer0DelayMs>:
 
 
 
 */
 void timer0DelayMs(uint16_t u16_delay_in_ms)
 {
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
	uint32_t u32_loop=0;
	u32_ovf_counter=0;
 418:	10 92 60 00 	sts	0x0060, r1
 41c:	10 92 61 00 	sts	0x0061, r1
 420:	10 92 62 00 	sts	0x0062, r1
 424:	10 92 63 00 	sts	0x0063, r1
		timer0Set(48);
 428:	80 e3       	ldi	r24, 0x30	; 48
 42a:	0e 94 ce 01 	call	0x39c	; 0x39c <timer0Set>
		while(u32_ovf_counter <= (8)*u16_delay_in_ms);
 42e:	cc 0f       	add	r28, r28
 430:	dd 1f       	adc	r29, r29
 432:	cc 0f       	add	r28, r28
 434:	dd 1f       	adc	r29, r29
 436:	cc 0f       	add	r28, r28
 438:	dd 1f       	adc	r29, r29
 43a:	ae 01       	movw	r20, r28
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 91 60 00 	lds	r24, 0x0060
 444:	90 91 61 00 	lds	r25, 0x0061
 448:	a0 91 62 00 	lds	r26, 0x0062
 44c:	b0 91 63 00 	lds	r27, 0x0063
 450:	48 17       	cp	r20, r24
 452:	59 07       	cpc	r21, r25
 454:	6a 07       	cpc	r22, r26
 456:	7b 07       	cpc	r23, r27
 458:	98 f7       	brcc	.-26     	; 0x440 <timer0DelayMs+0x2e>
	
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <timer0DelayUs>:
 
 
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
 460:	8f 92       	push	r8
 462:	9f 92       	push	r9
 464:	af 92       	push	r10
 466:	bf 92       	push	r11
 468:	cf 92       	push	r12
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	4b 01       	movw	r8, r22
 472:	5c 01       	movw	r10, r24
	u32_ovf_counter=0;
 474:	10 92 60 00 	sts	0x0060, r1
 478:	10 92 61 00 	sts	0x0061, r1
 47c:	10 92 62 00 	sts	0x0062, r1
 480:	10 92 63 00 	sts	0x0063, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 484:	61 15       	cp	r22, r1
 486:	71 05       	cpc	r23, r1
 488:	81 05       	cpc	r24, r1
 48a:	91 05       	cpc	r25, r1
 48c:	e9 f0       	breq	.+58     	; 0x4c8 <timer0DelayUs+0x68>
 48e:	cc 24       	eor	r12, r12
 490:	dd 24       	eor	r13, r13
 492:	76 01       	movw	r14, r12
	{
	timer0Set(254);
 494:	8e ef       	ldi	r24, 0xFE	; 254
 496:	0e 94 ce 01 	call	0x39c	; 0x39c <timer0Set>
	while(u32_ovf_counter <= 1);	
 49a:	80 91 60 00 	lds	r24, 0x0060
 49e:	90 91 61 00 	lds	r25, 0x0061
 4a2:	a0 91 62 00 	lds	r26, 0x0062
 4a6:	b0 91 63 00 	lds	r27, 0x0063
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	91 05       	cpc	r25, r1
 4ae:	a1 05       	cpc	r26, r1
 4b0:	b1 05       	cpc	r27, r1
 4b2:	98 f3       	brcs	.-26     	; 0x49a <timer0DelayUs+0x3a>
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
	u32_ovf_counter=0;
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 4b4:	08 94       	sec
 4b6:	c1 1c       	adc	r12, r1
 4b8:	d1 1c       	adc	r13, r1
 4ba:	e1 1c       	adc	r14, r1
 4bc:	f1 1c       	adc	r15, r1
 4be:	c8 14       	cp	r12, r8
 4c0:	d9 04       	cpc	r13, r9
 4c2:	ea 04       	cpc	r14, r10
 4c4:	fb 04       	cpc	r15, r11
 4c6:	31 f7       	brne	.-52     	; 0x494 <timer0DelayUs+0x34>
	timer0Set(254);
	while(u32_ovf_counter <= 1);	
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	
}/*1*/
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	af 90       	pop	r10
 4d4:	9f 90       	pop	r9
 4d6:	8f 90       	pop	r8
 4d8:	08 95       	ret

000004da <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	 u32_ovf_counter=0;
 4da:	10 92 60 00 	sts	0x0060, r1
 4de:	10 92 61 00 	sts	0x0061, r1
 4e2:	10 92 62 00 	sts	0x0062, r1
 4e6:	10 92 63 00 	sts	0x0063, r1
	 timer0Set(155);
 4ea:	8b e9       	ldi	r24, 0x9B	; 155
 4ec:	0e 94 ce 01 	call	0x39c	; 0x39c <timer0Set>
	 while(u32_ovf_counter <= 1);
 4f0:	80 91 60 00 	lds	r24, 0x0060
 4f4:	90 91 61 00 	lds	r25, 0x0061
 4f8:	a0 91 62 00 	lds	r26, 0x0062
 4fc:	b0 91 63 00 	lds	r27, 0x0063
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	91 05       	cpc	r25, r1
 504:	a1 05       	cpc	r26, r1
 506:	b1 05       	cpc	r27, r1
 508:	98 f3       	brcs	.-26     	; 0x4f0 <timer0SwPWM+0x16>
	 
	 
} 
 50a:	08 95       	ret

0000050c <timer1Init>:
 En_timer1Interrupt_t en_interruptMask)
 {
	 
	 
	 
 }
 50c:	08 95       	ret

0000050e <timer1Set>:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	
}
 50e:	08 95       	ret

00000510 <timer1Read>:
 */
uint16_t timer1Read(void)
{
	
	
}
 510:	08 95       	ret

00000512 <timer1Start>:
void timer1Start(void)
{


	
}
 512:	08 95       	ret

00000514 <timer1Stop>:
void timer1Stop(void)
{
	
	
	
}
 514:	08 95       	ret

00000516 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
	
	
}
 516:	08 95       	ret

00000518 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	
	
}
 518:	08 95       	ret

0000051a <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	
	
}
 51a:	08 95       	ret

0000051c <main>:
#include "Interrupts.h"
uint8_t Prescaler_Value=0;
volatile uint32_t u32_ovf_counter=0; 
int main(void)
{	
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	42 e0       	ldi	r20, 0x02	; 2
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	00 e0       	ldi	r16, 0x00	; 0
 526:	ee 24       	eor	r14, r14
 528:	e3 94       	inc	r14
 52a:	0e 94 df 01 	call	0x3be	; 0x3be <timer0Init>
Led_Init(LED_1);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 4e 01 	call	0x29c	; 0x29c <Led_Init>
Led_Init(LED_2);
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 4e 01 	call	0x29c	; 0x29c <Led_Init>
Led_Init(LED_3);	
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 4e 01 	call	0x29c	; 0x29c <Led_Init>
    while(1)
    {
Led_On(LED_1);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 6f 01 	call	0x2de	; 0x2de <Led_On>
timer0Start();
 546:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <timer0Start>
timer0DelayMs(1000);
 54a:	88 ee       	ldi	r24, 0xE8	; 232
 54c:	93 e0       	ldi	r25, 0x03	; 3
 54e:	0e 94 09 02 	call	0x412	; 0x412 <timer0DelayMs>
Led_Off(LED_1);	
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 90 01 	call	0x320	; 0x320 <Led_Off>
Led_On(LED_3);
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	0e 94 6f 01 	call	0x2de	; 0x2de <Led_On>
timer0Start();
 55e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <timer0Start>
timer0DelayMs(1000);
 562:	88 ee       	ldi	r24, 0xE8	; 232
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	0e 94 09 02 	call	0x412	; 0x412 <timer0DelayMs>
Led_Off(LED_3);
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	0e 94 90 01 	call	0x320	; 0x320 <Led_Off>
Led_On(LED_2);
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 6f 01 	call	0x2de	; 0x2de <Led_On>
timer0Start();
 576:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <timer0Start>
timer0DelayMs(1000);
 57a:	88 ee       	ldi	r24, 0xE8	; 232
 57c:	93 e0       	ldi	r25, 0x03	; 3
 57e:	0e 94 09 02 	call	0x412	; 0x412 <timer0DelayMs>
Led_Off(LED_2);
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	0e 94 90 01 	call	0x320	; 0x320 <Led_Off>
 588:	db cf       	rjmp	.-74     	; 0x540 <main+0x24>

0000058a <__vector_11>:
}
}
void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
	u32_ovf_counter++;
 59c:	80 91 60 00 	lds	r24, 0x0060
 5a0:	90 91 61 00 	lds	r25, 0x0061
 5a4:	a0 91 62 00 	lds	r26, 0x0062
 5a8:	b0 91 63 00 	lds	r27, 0x0063
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	a1 1d       	adc	r26, r1
 5b0:	b1 1d       	adc	r27, r1
 5b2:	80 93 60 00 	sts	0x0060, r24
 5b6:	90 93 61 00 	sts	0x0061, r25
 5ba:	a0 93 62 00 	sts	0x0062, r26
 5be:	b0 93 63 00 	sts	0x0063, r27
}/*
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
